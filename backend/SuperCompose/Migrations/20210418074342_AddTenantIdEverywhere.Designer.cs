// <auto-generated />
using System;
using System.Collections.Generic;
using Docker.DotNet.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SuperCompose.Context;

namespace SuperCompose.Migrations
{
    [DbContext(typeof(SuperComposeContext))]
    [Migration("20210418074342_AddTenantIdEverywhere")]
    partial class AddTenantIdEverywhere
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresEnum(null, "connection_log_severity", new[] { "info", "error", "warning" })
                .HasPostgresExtension("uuid-ossp")
                .HasAnnotation("Relational:Collation", "en_US.UTF-8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("SuperCompose.Context.Compose", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CurrentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CurrentId")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Composes");
                });

            modelBuilder.Entity("SuperCompose.Context.ComposeVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComposeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Directory")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("PendingDelete")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("RedeploymentRequestedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("ServiceEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("ComposeVersions");
                });

            modelBuilder.Entity("SuperCompose.Context.ConnectionLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ComposeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeploymentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Dictionary<string, object>>("Metadata")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<int>("Severity")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ComposeId");

                    b.HasIndex("DeploymentId");

                    b.HasIndex("NodeId");

                    b.HasIndex("TenantId");

                    b.ToTable("ConnectionLogs");
                });

            modelBuilder.Entity("SuperCompose.Context.Container", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContainerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ContainerNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("DeploymentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<ContainerInspectResponse>("LastInspect")
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("LastInspectAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeploymentId");

                    b.HasIndex("TenantId");

                    b.ToTable("Containers");
                });

            modelBuilder.Entity("SuperCompose.Context.Deployment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComposeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastCheck")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("LastDeployedAsEnabled")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastDeployedComposeVersionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastDeployedNodeVersion")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("ReconciliationFailed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("RedeploymentRequestedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LastDeployedComposeVersionId");

                    b.HasIndex("NodeId");

                    b.HasIndex("TenantId");

                    b.HasIndex("ComposeId", "NodeId")
                        .IsUnique();

                    b.ToTable("Deployments");
                });

            modelBuilder.Entity("SuperCompose.Context.Node", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<byte[]>("Password")
                        .HasColumnType("bytea");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<byte[]>("PrivateKey")
                        .HasColumnType("bytea");

                    b.Property<bool?>("ReconciliationFailed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("RedeploymentRequestedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("SuperCompose.Context.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("SuperCompose.Context.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("EncryptedEmail")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("IDPSubject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Picture")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IDPSubject")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SuperCompose.Context.Compose", b =>
                {
                    b.HasOne("SuperCompose.Context.ComposeVersion", "Current")
                        .WithOne("Compose")
                        .HasForeignKey("SuperCompose.Context.Compose", "CurrentId")
                        .IsRequired();

                    b.HasOne("SuperCompose.Context.Tenant", "Tenant")
                        .WithMany("Composes")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Current");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("SuperCompose.Context.ComposeVersion", b =>
                {
                    b.HasOne("SuperCompose.Context.Tenant", "Tenant")
                        .WithMany("ComposeVersions")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("SuperCompose.Context.ConnectionLog", b =>
                {
                    b.HasOne("SuperCompose.Context.Compose", "Compose")
                        .WithMany("ConnectionLogs")
                        .HasForeignKey("ComposeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SuperCompose.Context.Deployment", "Deployment")
                        .WithMany("ConnectionLogs")
                        .HasForeignKey("DeploymentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SuperCompose.Context.Node", "Node")
                        .WithMany("ConnectionLogs")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SuperCompose.Context.Tenant", "Tenant")
                        .WithMany("ConnectionLogs")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Compose");

                    b.Navigation("Deployment");

                    b.Navigation("Node");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("SuperCompose.Context.Container", b =>
                {
                    b.HasOne("SuperCompose.Context.Deployment", "Deployment")
                        .WithMany("Containers")
                        .HasForeignKey("DeploymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SuperCompose.Context.Tenant", "Tenant")
                        .WithMany("Containers")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deployment");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("SuperCompose.Context.Deployment", b =>
                {
                    b.HasOne("SuperCompose.Context.Compose", "Compose")
                        .WithMany("Deployments")
                        .HasForeignKey("ComposeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SuperCompose.Context.ComposeVersion", "LastDeployedComposeVersion")
                        .WithMany("Deployments")
                        .HasForeignKey("LastDeployedComposeVersionId");

                    b.HasOne("SuperCompose.Context.Node", "Node")
                        .WithMany("Deployments")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SuperCompose.Context.Tenant", "Tenant")
                        .WithMany("Deployments")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compose");

                    b.Navigation("LastDeployedComposeVersion");

                    b.Navigation("Node");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("SuperCompose.Context.Node", b =>
                {
                    b.HasOne("SuperCompose.Context.Tenant", "Tenant")
                        .WithMany("Nodes")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("SuperCompose.Context.Tenant", b =>
                {
                    b.HasOne("SuperCompose.Context.User", "User")
                        .WithMany("Tenants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("SuperCompose.Context.Compose", b =>
                {
                    b.Navigation("ConnectionLogs");

                    b.Navigation("Deployments");
                });

            modelBuilder.Entity("SuperCompose.Context.ComposeVersion", b =>
                {
                    b.Navigation("Compose");

                    b.Navigation("Deployments");
                });

            modelBuilder.Entity("SuperCompose.Context.Deployment", b =>
                {
                    b.Navigation("ConnectionLogs");

                    b.Navigation("Containers");
                });

            modelBuilder.Entity("SuperCompose.Context.Node", b =>
                {
                    b.Navigation("ConnectionLogs");

                    b.Navigation("Deployments");
                });

            modelBuilder.Entity("SuperCompose.Context.Tenant", b =>
                {
                    b.Navigation("Composes");

                    b.Navigation("ComposeVersions");

                    b.Navigation("ConnectionLogs");

                    b.Navigation("Containers");

                    b.Navigation("Deployments");

                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("SuperCompose.Context.User", b =>
                {
                    b.Navigation("Tenants");
                });
#pragma warning restore 612, 618
        }
    }
}
